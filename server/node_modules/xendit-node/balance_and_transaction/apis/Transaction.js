"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionApi = void 0;
const runtime = require("../../runtime");
const models_1 = require("../models");
/**
 *
 */
class TransactionApi extends runtime.BaseAPI {
    constructor({ secretKey, xenditURL }) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        });
        super(conf);
        this.secretKey = "";
        this.xenditURL = "";
        this.secretKey = secretKey;
    }
    /**
     * Get single specific transaction by transaction id.
     * Get a transaction based on its id
     */
    async getTransactionByIDRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getTransactionByID.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionResponseFromJSON)(jsonValue));
    }
    /**
     * Get single specific transaction by transaction id.
     * Get a transaction based on its id
     */
    async getTransactionByID(requestParameters) {
        const response = await this.getTransactionByIDRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get a list of all transactions based on filter and search parameters.
     * Get a list of transactions
     */
    async getAllTransactionsRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.types) {
            queryParameters['types'] = requestParameters.types;
        }
        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }
        if (requestParameters.channelCategories) {
            queryParameters['channel_categories'] = requestParameters.channelCategories;
        }
        if (requestParameters.referenceId !== undefined) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }
        if (requestParameters.productId !== undefined) {
            queryParameters['product_id'] = requestParameters.productId;
        }
        if (requestParameters.accountIdentifier !== undefined) {
            queryParameters['account_identifier'] = requestParameters.accountIdentifier;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }
        if (requestParameters.created !== undefined) {
            queryParameters['created'] = requestParameters.created;
        }
        if (requestParameters.updated !== undefined) {
            queryParameters['updated'] = requestParameters.updated;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }
        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionsResponseFromJSON)(jsonValue));
    }
    /**
     * Get a list of all transactions based on filter and search parameters.
     * Get a list of transactions
     */
    async getAllTransactions(requestParameters = {}) {
        const response = await this.getAllTransactionsRaw(requestParameters);
        return await response.value();
    }
}
exports.TransactionApi = TransactionApi;
