/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
/**
 * Response definition for a 400 Bad Request error when creating an invoice.
 * @export
 * @interface BadRequestError
 */
export interface BadRequestError {
    /**
     * The error code indicating the type of error that occurred.
     * @type {string}
     * @memberof BadRequestError
     */
    errorCode: BadRequestErrorErrorCodeEnum;
    /**
     * A human-readable error message that provides additional information about the error.
     * @type {string}
     * @memberof BadRequestError
     */
    message: string;
}
/**
 * @export
 */
export declare const BadRequestErrorErrorCodeEnum: {
    readonly MaximumTransferAmountError: "MAXIMUM_TRANSFER_AMOUNT_ERROR";
    readonly NoCollectionMethodsError: "NO_COLLECTION_METHODS_ERROR";
    readonly EmailFormatError: "EMAIL_FORMAT_ERROR";
    readonly UnavailablePaymentMethodError: "UNAVAILABLE_PAYMENT_METHOD_ERROR";
    readonly UnsupportedCurrency: "UNSUPPORTED_CURRENCY";
    readonly MismatchCurrencyError: "MISMATCH_CURRENCY_ERROR";
    readonly InvalidReminderTime: "INVALID_REMINDER_TIME";
};
export type BadRequestErrorErrorCodeEnum = typeof BadRequestErrorErrorCodeEnum[keyof typeof BadRequestErrorErrorCodeEnum];
/**
 * Check if a given object implements the BadRequestError interface.
 */
export declare function instanceOfBadRequestError(value: object): boolean;
export declare function BadRequestErrorFromJSON(json: any): BadRequestError;
export declare function BadRequestErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): BadRequestError;
export declare function BadRequestErrorToJSON(value?: BadRequestError | null): any;
