"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BadRequestErrorToJSON = exports.BadRequestErrorFromJSONTyped = exports.BadRequestErrorFromJSON = exports.instanceOfBadRequestError = exports.BadRequestErrorErrorCodeEnum = void 0;
/**
 * @export
 */
exports.BadRequestErrorErrorCodeEnum = {
    MaximumTransferAmountError: 'MAXIMUM_TRANSFER_AMOUNT_ERROR',
    NoCollectionMethodsError: 'NO_COLLECTION_METHODS_ERROR',
    EmailFormatError: 'EMAIL_FORMAT_ERROR',
    UnavailablePaymentMethodError: 'UNAVAILABLE_PAYMENT_METHOD_ERROR',
    UnsupportedCurrency: 'UNSUPPORTED_CURRENCY',
    MismatchCurrencyError: 'MISMATCH_CURRENCY_ERROR',
    InvalidReminderTime: 'INVALID_REMINDER_TIME'
};
/**
 * Check if a given object implements the BadRequestError interface.
 */
function instanceOfBadRequestError(value) {
    let isInstance = true;
    isInstance = isInstance && "errorCode" in value;
    isInstance = isInstance && "message" in value;
    return isInstance;
}
exports.instanceOfBadRequestError = instanceOfBadRequestError;
function BadRequestErrorFromJSON(json) {
    return BadRequestErrorFromJSONTyped(json, false);
}
exports.BadRequestErrorFromJSON = BadRequestErrorFromJSON;
function BadRequestErrorFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'errorCode': json['error_code'],
        'message': json['message'],
    };
}
exports.BadRequestErrorFromJSONTyped = BadRequestErrorFromJSONTyped;
function BadRequestErrorToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'error_code': value.errorCode,
        'message': value.message,
    };
}
exports.BadRequestErrorToJSON = BadRequestErrorToJSON;
