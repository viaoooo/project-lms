"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceApi = void 0;
const runtime = require("../../runtime");
const models_1 = require("../models");
/**
 *
 */
class InvoiceApi extends runtime.BaseAPI {
    constructor({ secretKey, xenditURL }) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        });
        super(conf);
        this.secretKey = "";
        this.xenditURL = "";
        this.secretKey = secretKey;
    }
    /**
     * Create an invoice
     */
    async createInvoiceRaw(requestParameters) {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('createInvoiceRequest', 'Required parameter requestParameters.data was null or undefined when calling createInvoice.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/invoices/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CreateInvoiceRequestToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.InvoiceFromJSON)(jsonValue));
    }
    /**
     * Create an invoice
     */
    async createInvoice(requestParameters) {
        const response = await this.createInvoiceRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get invoice by invoice id
     */
    async getInvoiceByIdRaw(requestParameters) {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId', 'Required parameter requestParameters.invoiceId was null or undefined when calling getInvoiceById.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/invoices/{invoice_id}`.replace(`{${"invoice_id"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.InvoiceFromJSON)(jsonValue));
    }
    /**
     * Get invoice by invoice id
     */
    async getInvoiceById(requestParameters) {
        const response = await this.getInvoiceByIdRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get all Invoices
     */
    async getInvoicesRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.externalId !== undefined) {
            queryParameters['external_id'] = requestParameters.externalId;
        }
        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = requestParameters.createdAfter.toISOString();
        }
        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = requestParameters.createdBefore.toISOString();
        }
        if (requestParameters.paidAfter !== undefined) {
            queryParameters['paid_after'] = requestParameters.paidAfter.toISOString();
        }
        if (requestParameters.paidBefore !== undefined) {
            queryParameters['paid_before'] = requestParameters.paidBefore.toISOString();
        }
        if (requestParameters.expiredAfter !== undefined) {
            queryParameters['expired_after'] = requestParameters.expiredAfter.toISOString();
        }
        if (requestParameters.expiredBefore !== undefined) {
            queryParameters['expired_before'] = requestParameters.expiredBefore.toISOString();
        }
        if (requestParameters.lastInvoice !== undefined) {
            queryParameters['last_invoice'] = requestParameters.lastInvoice;
        }
        if (requestParameters.clientTypes) {
            queryParameters['client_types'] = requestParameters.clientTypes;
        }
        if (requestParameters.paymentChannels) {
            queryParameters['payment_channels'] = requestParameters.paymentChannels;
        }
        if (requestParameters.onDemandLink !== undefined) {
            queryParameters['on_demand_link'] = requestParameters.onDemandLink;
        }
        if (requestParameters.recurringPaymentId !== undefined) {
            queryParameters['recurring_payment_id'] = requestParameters.recurringPaymentId;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/invoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.InvoiceFromJSON));
    }
    /**
     * Get all Invoices
     */
    async getInvoices(requestParameters = {}) {
        const response = await this.getInvoicesRaw(requestParameters);
        return await response.value();
    }
    /**
     * Manually expire an invoice
     */
    async expireInvoiceRaw(requestParameters) {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId', 'Required parameter requestParameters.invoiceId was null or undefined when calling expireInvoice.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/invoices/{invoice_id}/expire!`.replace(`{${"invoice_id"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.InvoiceFromJSON)(jsonValue));
    }
    /**
     * Manually expire an invoice
     */
    async expireInvoice(requestParameters) {
        const response = await this.expireInvoiceRaw(requestParameters);
        return await response.value();
    }
}
exports.InvoiceApi = InvoiceApi;
