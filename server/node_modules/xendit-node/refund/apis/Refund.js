"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefundApi = void 0;
const runtime = require("../../runtime");
const models_1 = require("../models");
/**
 *
 */
class RefundApi extends runtime.BaseAPI {
    constructor({ secretKey, xenditURL }) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        });
        super(conf);
        this.secretKey = "";
        this.xenditURL = "";
        this.secretKey = secretKey;
    }
    /**
     */
    async createRefundRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/refunds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CreateRefundToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RefundFromJSON)(jsonValue));
    }
    /**
     */
    async createRefund(requestParameters = {}) {
        const response = await this.createRefundRaw(requestParameters);
        return await response.value();
    }
    /**
     */
    async getRefundRaw(requestParameters) {
        if (requestParameters.refundID === null || requestParameters.refundID === undefined) {
            throw new runtime.RequiredError('refundID', 'Required parameter requestParameters.refundID was null or undefined when calling getRefund.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/refunds/{refundID}`.replace(`{${"refundID"}}`, encodeURIComponent(String(requestParameters.refundID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RefundFromJSON)(jsonValue));
    }
    /**
     */
    async getRefund(requestParameters) {
        const response = await this.getRefundRaw(requestParameters);
        return await response.value();
    }
    /**
     */
    async getAllRefundsRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.paymentRequestId !== undefined) {
            queryParameters['payment_request_id'] = requestParameters.paymentRequestId;
        }
        if (requestParameters.invoiceId !== undefined) {
            queryParameters['invoice_id'] = requestParameters.invoiceId;
        }
        if (requestParameters.paymentMethodType !== undefined) {
            queryParameters['payment_method_type'] = requestParameters.paymentMethodType;
        }
        if (requestParameters.channelCode !== undefined) {
            queryParameters['channel_code'] = requestParameters.channelCode;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }
        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/refunds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RefundListFromJSON)(jsonValue));
    }
    /**
     */
    async getAllRefunds(requestParameters = {}) {
        const response = await this.getAllRefundsRaw(requestParameters);
        return await response.value();
    }
    /**
     */
    async cancelRefundRaw(requestParameters) {
        if (requestParameters.refundID === null || requestParameters.refundID === undefined) {
            throw new runtime.RequiredError('refundID', 'Required parameter requestParameters.refundID was null or undefined when calling cancelRefund.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/refunds/{refundID}/cancel`.replace(`{${"refundID"}}`, encodeURIComponent(String(requestParameters.refundID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RefundFromJSON)(jsonValue));
    }
    /**
     */
    async cancelRefund(requestParameters) {
        const response = await this.cancelRefundRaw(requestParameters);
        return await response.value();
    }
}
exports.RefundApi = RefundApi;
