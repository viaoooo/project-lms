"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateRefundToJSON = exports.CreateRefundFromJSONTyped = exports.CreateRefundFromJSON = exports.instanceOfCreateRefund = exports.CreateRefundReasonEnum = void 0;
const runtime_1 = require("../../runtime");
/**
 * @export
 */
exports.CreateRefundReasonEnum = {
    Fraudulent: 'FRAUDULENT',
    Duplicate: 'DUPLICATE',
    RequestedByCustomer: 'REQUESTED_BY_CUSTOMER',
    Cancellation: 'CANCELLATION',
    Others: 'OTHERS'
};
/**
 * Check if a given object implements the CreateRefund interface.
 */
function instanceOfCreateRefund(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCreateRefund = instanceOfCreateRefund;
function CreateRefundFromJSON(json) {
    return CreateRefundFromJSONTyped(json, false);
}
exports.CreateRefundFromJSON = CreateRefundFromJSON;
function CreateRefundFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'paymentRequestId': !(0, runtime_1.exists)(json, 'payment_request_id') ? undefined : json['payment_request_id'],
        'invoiceId': !(0, runtime_1.exists)(json, 'invoice_id') ? undefined : json['invoice_id'],
        'referenceId': !(0, runtime_1.exists)(json, 'reference_id') ? undefined : json['reference_id'],
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : json['amount'],
        'currency': !(0, runtime_1.exists)(json, 'currency') ? undefined : json['currency'],
        'reason': !(0, runtime_1.exists)(json, 'reason') ? undefined : json['reason'],
        'metadata': !(0, runtime_1.exists)(json, 'metadata') ? undefined : json['metadata'],
    };
}
exports.CreateRefundFromJSONTyped = CreateRefundFromJSONTyped;
function CreateRefundToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'payment_request_id': value.paymentRequestId,
        'invoice_id': value.invoiceId,
        'reference_id': value.referenceId,
        'amount': value.amount,
        'currency': value.currency,
        'reason': value.reason,
        'metadata': value.metadata,
    };
}
exports.CreateRefundToJSON = CreateRefundToJSON;
