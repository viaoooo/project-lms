"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefundCallbackDataToJSON = exports.RefundCallbackDataFromJSONTyped = exports.RefundCallbackDataFromJSON = exports.instanceOfRefundCallbackData = void 0;
const runtime_1 = require("../../runtime");
/**
 * Check if a given object implements the RefundCallbackData interface.
 */
function instanceOfRefundCallbackData(value) {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "paymentId" in value;
    isInstance = isInstance && "paymentMethodType" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "channelCode" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "reason" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    return isInstance;
}
exports.instanceOfRefundCallbackData = instanceOfRefundCallbackData;
function RefundCallbackDataFromJSON(json) {
    return RefundCallbackDataFromJSONTyped(json, false);
}
exports.RefundCallbackDataFromJSON = RefundCallbackDataFromJSON;
function RefundCallbackDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'paymentId': json['payment_id'],
        'invoiceId': !(0, runtime_1.exists)(json, 'invoice_id') ? undefined : json['invoice_id'],
        'paymentMethodType': json['payment_method_type'],
        'amount': json['amount'],
        'channelCode': json['channel_code'],
        'status': json['status'],
        'reason': json['reason'],
        'country': json['country'],
        'currency': json['currency'],
        'referenceId': !(0, runtime_1.exists)(json, 'reference_id') ? undefined : json['reference_id'],
        'failureCode': !(0, runtime_1.exists)(json, 'failure_code') ? undefined : json['failure_code'],
        'refundFeeAmount': !(0, runtime_1.exists)(json, 'refund_fee_amount') ? undefined : json['refund_fee_amount'],
        'created': json['created'],
        'updated': json['updated'],
        'metadata': !(0, runtime_1.exists)(json, 'metadata') ? undefined : json['metadata'],
    };
}
exports.RefundCallbackDataFromJSONTyped = RefundCallbackDataFromJSONTyped;
function RefundCallbackDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'payment_id': value.paymentId,
        'invoice_id': value.invoiceId,
        'payment_method_type': value.paymentMethodType,
        'amount': value.amount,
        'channel_code': value.channelCode,
        'status': value.status,
        'reason': value.reason,
        'country': value.country,
        'currency': value.currency,
        'reference_id': value.referenceId,
        'failure_code': value.failureCode,
        'refund_fee_amount': value.refundFeeAmount,
        'created': value.created,
        'updated': value.updated,
        'metadata': value.metadata,
    };
}
exports.RefundCallbackDataToJSON = RefundCallbackDataToJSON;
