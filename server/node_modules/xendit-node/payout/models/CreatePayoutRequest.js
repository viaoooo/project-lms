"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreatePayoutRequestToJSON = exports.CreatePayoutRequestFromJSONTyped = exports.CreatePayoutRequestFromJSON = exports.instanceOfCreatePayoutRequest = void 0;
const runtime_1 = require("../../runtime");
const DigitalPayoutChannelProperties_1 = require("./DigitalPayoutChannelProperties");
const ReceiptNotification_1 = require("./ReceiptNotification");
/**
 * Check if a given object implements the CreatePayoutRequest interface.
 */
function instanceOfCreatePayoutRequest(value) {
    let isInstance = true;
    isInstance = isInstance && "referenceId" in value;
    isInstance = isInstance && "channelCode" in value;
    isInstance = isInstance && "channelProperties" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "currency" in value;
    return isInstance;
}
exports.instanceOfCreatePayoutRequest = instanceOfCreatePayoutRequest;
function CreatePayoutRequestFromJSON(json) {
    return CreatePayoutRequestFromJSONTyped(json, false);
}
exports.CreatePayoutRequestFromJSON = CreatePayoutRequestFromJSON;
function CreatePayoutRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'referenceId': json['reference_id'],
        'channelCode': json['channel_code'],
        'channelProperties': (0, DigitalPayoutChannelProperties_1.DigitalPayoutChannelPropertiesFromJSON)(json['channel_properties']),
        'amount': json['amount'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'currency': json['currency'],
        'receiptNotification': !(0, runtime_1.exists)(json, 'receipt_notification') ? undefined : (0, ReceiptNotification_1.ReceiptNotificationFromJSON)(json['receipt_notification']),
        'metadata': !(0, runtime_1.exists)(json, 'metadata') ? undefined : json['metadata'],
    };
}
exports.CreatePayoutRequestFromJSONTyped = CreatePayoutRequestFromJSONTyped;
function CreatePayoutRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'reference_id': value.referenceId,
        'channel_code': value.channelCode,
        'channel_properties': (0, DigitalPayoutChannelProperties_1.DigitalPayoutChannelPropertiesToJSON)(value.channelProperties),
        'amount': value.amount,
        'description': value.description,
        'currency': value.currency,
        'receipt_notification': (0, ReceiptNotification_1.ReceiptNotificationToJSON)(value.receiptNotification),
        'metadata': value.metadata,
    };
}
exports.CreatePayoutRequestToJSON = CreatePayoutRequestToJSON;
