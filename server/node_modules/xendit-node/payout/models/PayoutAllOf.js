"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayoutAllOfToJSON = exports.PayoutAllOfFromJSONTyped = exports.PayoutAllOfFromJSON = exports.instanceOfPayoutAllOf = exports.PayoutAllOfFailureCodeEnum = exports.PayoutAllOfStatusEnum = void 0;
const runtime_1 = require("../../runtime");
/**
 * @export
 */
exports.PayoutAllOfStatusEnum = {
    Succeeded: 'SUCCEEDED',
    Failed: 'FAILED',
    Accepted: 'ACCEPTED',
    Requested: 'REQUESTED',
    Locked: 'LOCKED',
    Cancelled: 'CANCELLED',
    Reversed: 'REVERSED'
};
/**
 * @export
 */
exports.PayoutAllOfFailureCodeEnum = {
    InsufficientBalance: 'INSUFFICIENT_BALANCE',
    RejectedByChannel: 'REJECTED_BY_CHANNEL',
    TemporaryTransferError: 'TEMPORARY_TRANSFER_ERROR',
    InvalidDestination: 'INVALID_DESTINATION',
    TransferError: 'TRANSFER_ERROR'
};
/**
 * Check if a given object implements the PayoutAllOf interface.
 */
function instanceOfPayoutAllOf(value) {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "businessId" in value;
    isInstance = isInstance && "status" in value;
    return isInstance;
}
exports.instanceOfPayoutAllOf = instanceOfPayoutAllOf;
function PayoutAllOfFromJSON(json) {
    return PayoutAllOfFromJSONTyped(json, false);
}
exports.PayoutAllOfFromJSON = PayoutAllOfFromJSON;
function PayoutAllOfFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'created': (new Date(json['created'])),
        'updated': (new Date(json['updated'])),
        'businessId': json['business_id'],
        'status': json['status'],
        'failureCode': !(0, runtime_1.exists)(json, 'failure_code') ? undefined : json['failure_code'],
        'estimatedArrivalTime': !(0, runtime_1.exists)(json, 'estimated_arrival_time') ? undefined : (new Date(json['estimated_arrival_time'])),
    };
}
exports.PayoutAllOfFromJSONTyped = PayoutAllOfFromJSONTyped;
function PayoutAllOfToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'created': (value.created.toISOString()),
        'updated': (value.updated.toISOString()),
        'business_id': value.businessId,
        'status': value.status,
        'failure_code': value.failureCode,
        'estimated_arrival_time': value.estimatedArrivalTime === undefined ? undefined : (value.estimatedArrivalTime.toISOString()),
    };
}
exports.PayoutAllOfToJSON = PayoutAllOfToJSON;
