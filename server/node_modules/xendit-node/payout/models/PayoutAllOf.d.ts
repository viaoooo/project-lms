/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
/**
 *
 * @export
 * @interface PayoutAllOf
 */
export interface PayoutAllOf {
    /**
     * Xendit-generated unique identifier for each payout
     * @type {string}
     * @memberof PayoutAllOf
     */
    id: string;
    /**
     * The time payout was created on Xendit's system, in ISO 8601 format
     * @type {Date}
     * @memberof PayoutAllOf
     */
    created: Date;
    /**
     * The time payout was last updated on Xendit's system, in ISO 8601 format
     * @type {Date}
     * @memberof PayoutAllOf
     */
    updated: Date;
    /**
     * Xendit Business ID
     * @type {string}
     * @memberof PayoutAllOf
     */
    businessId: string;
    /**
     * Status of payout
     * @type {string}
     * @memberof PayoutAllOf
     */
    status: PayoutAllOfStatusEnum;
    /**
     * If the Payout failed, we include a failure code for more details on the failure.
     * @type {string}
     * @memberof PayoutAllOf
     */
    failureCode?: PayoutAllOfFailureCodeEnum;
    /**
     * Our estimated time on to when your payout is reflected to the destination account
     * @type {Date}
     * @memberof PayoutAllOf
     */
    estimatedArrivalTime?: Date;
}
/**
 * @export
 */
export declare const PayoutAllOfStatusEnum: {
    readonly Succeeded: "SUCCEEDED";
    readonly Failed: "FAILED";
    readonly Accepted: "ACCEPTED";
    readonly Requested: "REQUESTED";
    readonly Locked: "LOCKED";
    readonly Cancelled: "CANCELLED";
    readonly Reversed: "REVERSED";
};
export type PayoutAllOfStatusEnum = typeof PayoutAllOfStatusEnum[keyof typeof PayoutAllOfStatusEnum];
/**
 * @export
 */
export declare const PayoutAllOfFailureCodeEnum: {
    readonly InsufficientBalance: "INSUFFICIENT_BALANCE";
    readonly RejectedByChannel: "REJECTED_BY_CHANNEL";
    readonly TemporaryTransferError: "TEMPORARY_TRANSFER_ERROR";
    readonly InvalidDestination: "INVALID_DESTINATION";
    readonly TransferError: "TRANSFER_ERROR";
};
export type PayoutAllOfFailureCodeEnum = typeof PayoutAllOfFailureCodeEnum[keyof typeof PayoutAllOfFailureCodeEnum];
/**
 * Check if a given object implements the PayoutAllOf interface.
 */
export declare function instanceOfPayoutAllOf(value: object): boolean;
export declare function PayoutAllOfFromJSON(json: any): PayoutAllOf;
export declare function PayoutAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayoutAllOf;
export declare function PayoutAllOfToJSON(value?: PayoutAllOf | null): any;
