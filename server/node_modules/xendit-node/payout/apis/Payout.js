"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayoutApi = void 0;
const runtime = require("../../runtime");
const models_1 = require("../models");
/**
 *
 */
class PayoutApi extends runtime.BaseAPI {
    constructor({ secretKey, xenditURL }) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        });
        super(conf);
        this.secretKey = "";
        this.xenditURL = "";
        this.secretKey = secretKey;
    }
    /**
     * API to send money at scale to bank accounts & eWallets
     */
    async createPayoutRaw(requestParameters) {
        if (requestParameters.idempotencyKey === null || requestParameters.idempotencyKey === undefined) {
            throw new runtime.RequiredError('idempotencyKey', 'Required parameter requestParameters.idempotencyKey was null or undefined when calling createPayout.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CreatePayoutRequestToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetPayouts200ResponseDataInnerFromJSON)(jsonValue));
    }
    /**
     * API to send money at scale to bank accounts & eWallets
     */
    async createPayout(requestParameters) {
        const response = await this.createPayoutRaw(requestParameters);
        return await response.value();
    }
    /**
     * API to fetch the current status, or details of the payout
     */
    async getPayoutByIdRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getPayoutById.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetPayouts200ResponseDataInnerFromJSON)(jsonValue));
    }
    /**
     * API to fetch the current status, or details of the payout
     */
    async getPayoutById(requestParameters) {
        const response = await this.getPayoutByIdRaw(requestParameters);
        return await response.value();
    }
    /**
     * API providing the current list of banks and e-wallets we support for payouts for both regions
     */
    async getPayoutChannelsRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }
        if (requestParameters.channelCategory) {
            queryParameters['channel_category'] = requestParameters.channelCategory.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.channelCode !== undefined) {
            queryParameters['channel_code'] = requestParameters.channelCode;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/payouts_channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.ChannelFromJSON));
    }
    /**
     * API providing the current list of banks and e-wallets we support for payouts for both regions
     */
    async getPayoutChannels(requestParameters = {}) {
        const response = await this.getPayoutChannelsRaw(requestParameters);
        return await response.value();
    }
    /**
     * API to retrieve all matching payouts with reference ID
     */
    async getPayoutsRaw(requestParameters) {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId', 'Required parameter requestParameters.referenceId was null or undefined when calling getPayouts.');
        }
        const queryParameters = {};
        if (requestParameters.referenceId !== undefined) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }
        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetPayouts200ResponseFromJSON)(jsonValue));
    }
    /**
     * API to retrieve all matching payouts with reference ID
     */
    async getPayouts(requestParameters) {
        const response = await this.getPayoutsRaw(requestParameters);
        return await response.value();
    }
    /**
     * API to cancel requested payouts that have not yet been sent to partner banks and e-wallets. Cancellation is possible if the payout has not been sent out via our partner and when payout status is ACCEPTED.
     */
    async cancelPayoutRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling cancelPayout.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payouts/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetPayouts200ResponseDataInnerFromJSON)(jsonValue));
    }
    /**
     * API to cancel requested payouts that have not yet been sent to partner banks and e-wallets. Cancellation is possible if the payout has not been sent out via our partner and when payout status is ACCEPTED.
     */
    async cancelPayout(requestParameters) {
        const response = await this.cancelPayoutRaw(requestParameters);
        return await response.value();
    }
}
exports.PayoutApi = PayoutApi;
