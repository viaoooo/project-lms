/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
import * as runtime from '../../runtime';
import type { Channel, ChannelCategory, CreatePayoutRequest, GetPayouts200Response, GetPayouts200ResponseDataInner } from '../models';
export interface CreatePayoutOperationRequest {
    idempotencyKey: string;
    forUserId?: string;
    data?: CreatePayoutRequest;
}
export interface GetPayoutByIdRequest {
    id: string;
    forUserId?: string;
}
export interface GetPayoutChannelsRequest {
    currency?: string;
    channelCategory?: Array<ChannelCategory>;
    channelCode?: string;
    forUserId?: string;
}
export interface GetPayoutsRequest {
    referenceId: string;
    limit?: number;
    afterId?: string;
    beforeId?: string;
    forUserId?: string;
}
export interface CancelPayoutRequest {
    id: string;
    forUserId?: string;
}
/**
 *
 */
export declare class PayoutApi extends runtime.BaseAPI {
    secretKey: string;
    xenditURL: string;
    constructor({ secretKey, xenditURL }: {
        secretKey: string;
        xenditURL?: string;
    });
    /**
     * API to send money at scale to bank accounts & eWallets
     */
    private createPayoutRaw;
    /**
     * API to send money at scale to bank accounts & eWallets
     */
    createPayout(requestParameters: CreatePayoutOperationRequest): Promise<GetPayouts200ResponseDataInner>;
    /**
     * API to fetch the current status, or details of the payout
     */
    private getPayoutByIdRaw;
    /**
     * API to fetch the current status, or details of the payout
     */
    getPayoutById(requestParameters: GetPayoutByIdRequest): Promise<GetPayouts200ResponseDataInner>;
    /**
     * API providing the current list of banks and e-wallets we support for payouts for both regions
     */
    private getPayoutChannelsRaw;
    /**
     * API providing the current list of banks and e-wallets we support for payouts for both regions
     */
    getPayoutChannels(requestParameters?: GetPayoutChannelsRequest): Promise<Array<Channel>>;
    /**
     * API to retrieve all matching payouts with reference ID
     */
    private getPayoutsRaw;
    /**
     * API to retrieve all matching payouts with reference ID
     */
    getPayouts(requestParameters: GetPayoutsRequest): Promise<GetPayouts200Response>;
    /**
     * API to cancel requested payouts that have not yet been sent to partner banks and e-wallets. Cancellation is possible if the payout has not been sent out via our partner and when payout status is ACCEPTED.
     */
    private cancelPayoutRaw;
    /**
     * API to cancel requested payouts that have not yet been sent to partner banks and e-wallets. Cancellation is possible if the payout has not been sent out via our partner and when payout status is ACCEPTED.
     */
    cancelPayout(requestParameters: CancelPayoutRequest): Promise<GetPayouts200ResponseDataInner>;
}
