"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressToJSON = exports.AddressFromJSONTyped = exports.AddressFromJSON = exports.instanceOfAddress = void 0;
const runtime_1 = require("../../runtime");
const AddressStatus_1 = require("./AddressStatus");
/**
 * Check if a given object implements the Address interface.
 */
function instanceOfAddress(value) {
    let isInstance = true;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "provinceState" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "postalCode" in value;
    isInstance = isInstance && "streetLine1" in value;
    isInstance = isInstance && "streetLine2" in value;
    isInstance = isInstance && "isPrimary" in value;
    return isInstance;
}
exports.instanceOfAddress = instanceOfAddress;
function AddressFromJSON(json) {
    return AddressFromJSONTyped(json, false);
}
exports.AddressFromJSON = AddressFromJSON;
function AddressFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'category': json['category'],
        'country': json['country'],
        'provinceState': json['province_state'],
        'city': json['city'],
        'postalCode': json['postal_code'],
        'streetLine1': json['street_line1'],
        'streetLine2': json['street_line2'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, AddressStatus_1.AddressStatusFromJSON)(json['status']),
        'isPrimary': json['is_primary'],
        'meta': !(0, runtime_1.exists)(json, 'meta') ? undefined : json['meta'],
        'created': !(0, runtime_1.exists)(json, 'created') ? undefined : (new Date(json['created'])),
        'updated': !(0, runtime_1.exists)(json, 'updated') ? undefined : (new Date(json['updated'])),
    };
}
exports.AddressFromJSONTyped = AddressFromJSONTyped;
function AddressToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'category': value.category,
        'country': value.country,
        'province_state': value.provinceState,
        'city': value.city,
        'postal_code': value.postalCode,
        'street_line1': value.streetLine1,
        'street_line2': value.streetLine2,
        'status': (0, AddressStatus_1.AddressStatusToJSON)(value.status),
        'is_primary': value.isPrimary,
        'meta': value.meta,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'updated': value.updated === undefined ? undefined : (value.updated.toISOString()),
    };
}
exports.AddressToJSON = AddressToJSON;
