"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerToJSON = exports.CustomerFromJSONTyped = exports.CustomerFromJSON = exports.instanceOfCustomer = exports.CustomerTypeEnum = void 0;
const runtime_1 = require("../../runtime");
const Address_1 = require("./Address");
const BusinessDetail_1 = require("./BusinessDetail");
const EndCustomerStatus_1 = require("./EndCustomerStatus");
const IdentityAccountResponse_1 = require("./IdentityAccountResponse");
const IndividualDetail_1 = require("./IndividualDetail");
const KYCDocumentResponse_1 = require("./KYCDocumentResponse");
/**
 * @export
 */
exports.CustomerTypeEnum = {
    Individual: 'INDIVIDUAL',
    Business: 'BUSINESS'
};
/**
 * Check if a given object implements the Customer interface.
 */
function instanceOfCustomer(value) {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "referenceId" in value;
    isInstance = isInstance && "individualDetail" in value;
    isInstance = isInstance && "businessDetail" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "mobileNumber" in value;
    isInstance = isInstance && "phoneNumber" in value;
    isInstance = isInstance && "addresses" in value;
    isInstance = isInstance && "identityAccounts" in value;
    isInstance = isInstance && "kycDocuments" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    return isInstance;
}
exports.instanceOfCustomer = instanceOfCustomer;
function CustomerFromJSON(json) {
    return CustomerFromJSONTyped(json, false);
}
exports.CustomerFromJSON = CustomerFromJSON;
function CustomerFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'type': json['type'],
        'referenceId': json['reference_id'],
        'individualDetail': (0, IndividualDetail_1.IndividualDetailFromJSON)(json['individual_detail']),
        'businessDetail': (0, BusinessDetail_1.BusinessDetailFromJSON)(json['business_detail']),
        'description': json['description'],
        'email': json['email'],
        'mobileNumber': json['mobile_number'],
        'phoneNumber': json['phone_number'],
        'addresses': (json['addresses'] === null ? null : json['addresses'].map(Address_1.AddressFromJSON)),
        'identityAccounts': (json['identity_accounts'] === null ? null : json['identity_accounts'].map(IdentityAccountResponse_1.IdentityAccountResponseFromJSON)),
        'kycDocuments': (json['kyc_documents'] === null ? null : json['kyc_documents'].map(KYCDocumentResponse_1.KYCDocumentResponseFromJSON)),
        'metadata': json['metadata'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, EndCustomerStatus_1.EndCustomerStatusFromJSON)(json['status']),
        'id': json['id'],
        'created': (new Date(json['created'])),
        'updated': (new Date(json['updated'])),
    };
}
exports.CustomerFromJSONTyped = CustomerFromJSONTyped;
function CustomerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'type': value.type,
        'reference_id': value.referenceId,
        'individual_detail': (0, IndividualDetail_1.IndividualDetailToJSON)(value.individualDetail),
        'business_detail': (0, BusinessDetail_1.BusinessDetailToJSON)(value.businessDetail),
        'description': value.description,
        'email': value.email,
        'mobile_number': value.mobileNumber,
        'phone_number': value.phoneNumber,
        'addresses': (value.addresses === null ? null : value.addresses.map(Address_1.AddressToJSON)),
        'identity_accounts': (value.identityAccounts === null ? null : value.identityAccounts.map(IdentityAccountResponse_1.IdentityAccountResponseToJSON)),
        'kyc_documents': (value.kycDocuments === null ? null : value.kycDocuments.map(KYCDocumentResponse_1.KYCDocumentResponseToJSON)),
        'metadata': value.metadata,
        'status': (0, EndCustomerStatus_1.EndCustomerStatusToJSON)(value.status),
        'id': value.id,
        'created': (value.created.toISOString()),
        'updated': (value.updated.toISOString()),
    };
}
exports.CustomerToJSON = CustomerToJSON;
