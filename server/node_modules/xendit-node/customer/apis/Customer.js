"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerApi = void 0;
const runtime = require("../../runtime");
const models_1 = require("../models");
/**
 *
 */
class CustomerApi extends runtime.BaseAPI {
    constructor({ secretKey, xenditURL }) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        });
        super(conf);
        this.secretKey = "";
        this.xenditURL = "";
        this.secretKey = secretKey;
    }
    /**
     * Function to create a customer that you may use in your Invoice or Payment Requests. For detail explanations, see this link: https://developers.xendit.co/api-reference/#create-customer
     * Create Customer
     */
    async createCustomerRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CustomerRequestToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CustomerFromJSON)(jsonValue));
    }
    /**
     * Function to create a customer that you may use in your Invoice or Payment Requests. For detail explanations, see this link: https://developers.xendit.co/api-reference/#create-customer
     * Create Customer
     */
    async createCustomer(requestParameters = {}) {
        const response = await this.createCustomerRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieves a single customer object For detail explanations, see this link: https://developers.xendit.co/api-reference/#get-customer
     * Get Customer By ID
     */
    async getCustomerRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getCustomer.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CustomerFromJSON)(jsonValue));
    }
    /**
     * Retrieves a single customer object For detail explanations, see this link: https://developers.xendit.co/api-reference/#get-customer
     * Get Customer By ID
     */
    async getCustomer(requestParameters) {
        const response = await this.getCustomerRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieves an array with a customer object that matches the provided reference_id - the identifier provided by you For detail explanations, see this link: https://developers.xendit.co/api-reference/#get-customer-by-reference-id
     * GET customers by reference id
     */
    async getCustomerByReferenceIDRaw(requestParameters) {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId', 'Required parameter requestParameters.referenceId was null or undefined when calling getCustomerByReferenceID.');
        }
        const queryParameters = {};
        if (requestParameters.referenceId !== undefined) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetCustomerByReferenceID200ResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves an array with a customer object that matches the provided reference_id - the identifier provided by you For detail explanations, see this link: https://developers.xendit.co/api-reference/#get-customer-by-reference-id
     * GET customers by reference id
     */
    async getCustomerByReferenceID(requestParameters) {
        const response = await this.getCustomerByReferenceIDRaw(requestParameters);
        return await response.value();
    }
    /**
     * Function to update an existing customer. For a detailed explanation For detail explanations, see this link: https://developers.xendit.co/api-reference/#update-customer
     * Update End Customer Resource
     */
    async updateCustomerRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateCustomer.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PatchCustomerToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CustomerFromJSON)(jsonValue));
    }
    /**
     * Function to update an existing customer. For a detailed explanation For detail explanations, see this link: https://developers.xendit.co/api-reference/#update-customer
     * Update End Customer Resource
     */
    async updateCustomer(requestParameters) {
        const response = await this.updateCustomerRaw(requestParameters);
        return await response.value();
    }
}
exports.CustomerApi = CustomerApi;
