"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentMethodApi = void 0;
const runtime = require("../../runtime");
const models_1 = require("../models");
/**
 *
 */
class PaymentMethodApi extends runtime.BaseAPI {
    constructor({ secretKey, xenditURL }) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        });
        super(conf);
        this.secretKey = "";
        this.xenditURL = "";
        this.secretKey = secretKey;
    }
    /**
     * This endpoint initiates creation of payment method
     * Creates payment method
     */
    async createPaymentMethodRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payment_methods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PaymentMethodParametersToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentMethodFromJSON)(jsonValue));
    }
    /**
     * This endpoint initiates creation of payment method
     * Creates payment method
     */
    async createPaymentMethod(requestParameters = {}) {
        const response = await this.createPaymentMethodRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get payment method by ID
     * Get payment method by ID
     */
    async getPaymentMethodByIDRaw(requestParameters) {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId', 'Required parameter requestParameters.paymentMethodId was null or undefined when calling getPaymentMethodByID.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentMethodFromJSON)(jsonValue));
    }
    /**
     * Get payment method by ID
     * Get payment method by ID
     */
    async getPaymentMethodByID(requestParameters) {
        const response = await this.getPaymentMethodByIDRaw(requestParameters);
        return await response.value();
    }
    /**
     * Returns payments with matching PaymentMethodID.
     * Returns payments with matching PaymentMethodID.
     */
    async getPaymentsByPaymentMethodIdRaw(requestParameters) {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId', 'Required parameter requestParameters.paymentMethodId was null or undefined when calling getPaymentsByPaymentMethodId.');
        }
        const queryParameters = {};
        if (requestParameters.paymentRequestId) {
            queryParameters['payment_request_id'] = requestParameters.paymentRequestId;
        }
        if (requestParameters.paymentMethodId2) {
            queryParameters['payment_method_id'] = requestParameters.paymentMethodId2;
        }
        if (requestParameters.referenceId) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }
        if (requestParameters.paymentMethodType) {
            queryParameters['payment_method_type'] = requestParameters.paymentMethodType;
        }
        if (requestParameters.channelCode) {
            queryParameters['channel_code'] = requestParameters.channelCode;
        }
        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }
        if (requestParameters.currency) {
            queryParameters['currency'] = requestParameters.currency;
        }
        if (requestParameters.createdGte !== undefined) {
            queryParameters['created[gte]'] = requestParameters.createdGte.toISOString();
        }
        if (requestParameters.createdLte !== undefined) {
            queryParameters['created[lte]'] = requestParameters.createdLte.toISOString();
        }
        if (requestParameters.updatedGte !== undefined) {
            queryParameters['updated[gte]'] = requestParameters.updatedGte.toISOString();
        }
        if (requestParameters.updatedLte !== undefined) {
            queryParameters['updated[lte]'] = requestParameters.updatedLte.toISOString();
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}/payments`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Returns payments with matching PaymentMethodID.
     * Returns payments with matching PaymentMethodID.
     */
    async getPaymentsByPaymentMethodId(requestParameters) {
        const response = await this.getPaymentsByPaymentMethodIdRaw(requestParameters);
        return await response.value();
    }
    /**
     * This endpoint is used to toggle the ```status``` of an e-Wallet or a Direct Debit payment method to ```ACTIVE``` or ```INACTIVE```. This is also used to update the details of an Over-the-Counter or a Virtual Account payment method.
     * Patch payment methods
     */
    async patchPaymentMethodRaw(requestParameters) {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId', 'Required parameter requestParameters.paymentMethodId was null or undefined when calling patchPaymentMethod.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PaymentMethodUpdateParametersToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentMethodFromJSON)(jsonValue));
    }
    /**
     * This endpoint is used to toggle the ```status``` of an e-Wallet or a Direct Debit payment method to ```ACTIVE``` or ```INACTIVE```. This is also used to update the details of an Over-the-Counter or a Virtual Account payment method.
     * Patch payment methods
     */
    async patchPaymentMethod(requestParameters) {
        const response = await this.patchPaymentMethodRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get all payment methods by filters
     * Get all payment methods by filters
     */
    async getAllPaymentMethodsRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }
        if (requestParameters.reusability !== undefined) {
            queryParameters['reusability'] = requestParameters.reusability;
        }
        if (requestParameters.customerId !== undefined) {
            queryParameters['customer_id'] = requestParameters.customerId;
        }
        if (requestParameters.referenceId !== undefined) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }
        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }
        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payment_methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentMethodListFromJSON)(jsonValue));
    }
    /**
     * Get all payment methods by filters
     * Get all payment methods by filters
     */
    async getAllPaymentMethods(requestParameters = {}) {
        const response = await this.getAllPaymentMethodsRaw(requestParameters);
        return await response.value();
    }
    /**
     * This endpoint expires a payment method and performs unlinking if necessary
     * Expires a payment method
     */
    async expirePaymentMethodRaw(requestParameters) {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId', 'Required parameter requestParameters.paymentMethodId was null or undefined when calling expirePaymentMethod.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}/expire`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PaymentMethodExpireParametersToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentMethodFromJSON)(jsonValue));
    }
    /**
     * This endpoint expires a payment method and performs unlinking if necessary
     * Expires a payment method
     */
    async expirePaymentMethod(requestParameters) {
        const response = await this.expirePaymentMethodRaw(requestParameters);
        return await response.value();
    }
    /**
     * This endpoint validates a payment method linking OTP
     * Validate a payment method\'s linking OTP
     */
    async authPaymentMethodRaw(requestParameters) {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId', 'Required parameter requestParameters.paymentMethodId was null or undefined when calling authPaymentMethod.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}/auth`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PaymentMethodAuthParametersToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentMethodFromJSON)(jsonValue));
    }
    /**
     * This endpoint validates a payment method linking OTP
     * Validate a payment method\'s linking OTP
     */
    async authPaymentMethod(requestParameters) {
        const response = await this.authPaymentMethodRaw(requestParameters);
        return await response.value();
    }
    /**
     * Makes payment with matching PaymentMethodID.
     * Makes payment with matching PaymentMethodID.
     */
    async simulatePaymentRaw(requestParameters) {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId', 'Required parameter requestParameters.paymentMethodId was null or undefined when calling simulatePayment.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}/payments/simulate`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SimulatePaymentRequestToJSON)(requestParameters.data),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Makes payment with matching PaymentMethodID.
     * Makes payment with matching PaymentMethodID.
     */
    async simulatePayment(requestParameters) {
        await this.simulatePaymentRaw(requestParameters);
    }
}
exports.PaymentMethodApi = PaymentMethodApi;
