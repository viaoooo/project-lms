"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentMethodUpdateParametersToJSON = exports.PaymentMethodUpdateParametersFromJSONTyped = exports.PaymentMethodUpdateParametersFromJSON = exports.instanceOfPaymentMethodUpdateParameters = void 0;
const runtime_1 = require("../../runtime");
const OverTheCounterUpdateParameters_1 = require("./OverTheCounterUpdateParameters");
const PaymentMethodReusability_1 = require("./PaymentMethodReusability");
const PaymentMethodStatus_1 = require("./PaymentMethodStatus");
const VirtualAccountUpdateParameters_1 = require("./VirtualAccountUpdateParameters");
/**
 * Check if a given object implements the PaymentMethodUpdateParameters interface.
 */
function instanceOfPaymentMethodUpdateParameters(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPaymentMethodUpdateParameters = instanceOfPaymentMethodUpdateParameters;
function PaymentMethodUpdateParametersFromJSON(json) {
    return PaymentMethodUpdateParametersFromJSONTyped(json, false);
}
exports.PaymentMethodUpdateParametersFromJSON = PaymentMethodUpdateParametersFromJSON;
function PaymentMethodUpdateParametersFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'referenceId': !(0, runtime_1.exists)(json, 'reference_id') ? undefined : json['reference_id'],
        'reusability': !(0, runtime_1.exists)(json, 'reusability') ? undefined : (0, PaymentMethodReusability_1.PaymentMethodReusabilityFromJSON)(json['reusability']),
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, PaymentMethodStatus_1.PaymentMethodStatusFromJSON)(json['status']),
        'overTheCounter': !(0, runtime_1.exists)(json, 'over_the_counter') ? undefined : (0, OverTheCounterUpdateParameters_1.OverTheCounterUpdateParametersFromJSON)(json['over_the_counter']),
        'virtualAccount': !(0, runtime_1.exists)(json, 'virtual_account') ? undefined : (0, VirtualAccountUpdateParameters_1.VirtualAccountUpdateParametersFromJSON)(json['virtual_account']),
    };
}
exports.PaymentMethodUpdateParametersFromJSONTyped = PaymentMethodUpdateParametersFromJSONTyped;
function PaymentMethodUpdateParametersToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': value.description,
        'reference_id': value.referenceId,
        'reusability': (0, PaymentMethodReusability_1.PaymentMethodReusabilityToJSON)(value.reusability),
        'status': (0, PaymentMethodStatus_1.PaymentMethodStatusToJSON)(value.status),
        'over_the_counter': (0, OverTheCounterUpdateParameters_1.OverTheCounterUpdateParametersToJSON)(value.overTheCounter),
        'virtual_account': (0, VirtualAccountUpdateParameters_1.VirtualAccountUpdateParametersToJSON)(value.virtualAccount),
    };
}
exports.PaymentMethodUpdateParametersToJSON = PaymentMethodUpdateParametersToJSON;
