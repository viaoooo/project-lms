"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentRequestApi = void 0;
const runtime = require("../../runtime");
const models_1 = require("../models");
/**
 *
 */
class PaymentRequestApi extends runtime.BaseAPI {
    constructor({ secretKey, xenditURL }) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        });
        super(conf);
        this.secretKey = "";
        this.xenditURL = "";
        this.secretKey = secretKey;
    }
    /**
     * Create Payment Request
     * Create Payment Request
     */
    async createPaymentRequestRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/payment_requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PaymentRequestParametersToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentRequestFromJSON)(jsonValue));
    }
    /**
     * Create Payment Request
     * Create Payment Request
     */
    async createPaymentRequest(requestParameters = {}) {
        const response = await this.createPaymentRequestRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get payment request by ID
     * Get payment request by ID
     */
    async getPaymentRequestByIDRaw(requestParameters) {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId', 'Required parameter requestParameters.paymentRequestId was null or undefined when calling getPaymentRequestByID.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentRequestFromJSON)(jsonValue));
    }
    /**
     * Get payment request by ID
     * Get payment request by ID
     */
    async getPaymentRequestByID(requestParameters) {
        const response = await this.getPaymentRequestByIDRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get Payment Request Capture
     * Get Payment Request Capture
     */
    async getPaymentRequestCapturesRaw(requestParameters) {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId', 'Required parameter requestParameters.paymentRequestId was null or undefined when calling getPaymentRequestCaptures.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/captures`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CaptureListResponseFromJSON)(jsonValue));
    }
    /**
     * Get Payment Request Capture
     * Get Payment Request Capture
     */
    async getPaymentRequestCaptures(requestParameters) {
        const response = await this.getPaymentRequestCapturesRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get all payment requests by filter
     * Get all payment requests by filter
     */
    async getAllPaymentRequestsRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.referenceId) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }
        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.customerId) {
            queryParameters['customer_id'] = requestParameters.customerId;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }
        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/payment_requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentRequestListResponseFromJSON)(jsonValue));
    }
    /**
     * Get all payment requests by filter
     * Get all payment requests by filter
     */
    async getAllPaymentRequests(requestParameters = {}) {
        const response = await this.getAllPaymentRequestsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Payment Request Capture
     * Payment Request Capture
     */
    async capturePaymentRequestRaw(requestParameters) {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId', 'Required parameter requestParameters.paymentRequestId was null or undefined when calling capturePaymentRequest.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/captures`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CaptureParametersToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CaptureFromJSON)(jsonValue));
    }
    /**
     * Payment Request Capture
     * Payment Request Capture
     */
    async capturePaymentRequest(requestParameters) {
        const response = await this.capturePaymentRequestRaw(requestParameters);
        return await response.value();
    }
    /**
     * Payment Request Authorize
     * Payment Request Authorize
     */
    async authorizePaymentRequestRaw(requestParameters) {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId', 'Required parameter requestParameters.paymentRequestId was null or undefined when calling authorizePaymentRequest.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/auth`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PaymentRequestAuthParametersToJSON)(requestParameters.data),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentRequestFromJSON)(jsonValue));
    }
    /**
     * Payment Request Authorize
     * Payment Request Authorize
     */
    async authorizePaymentRequest(requestParameters) {
        const response = await this.authorizePaymentRequestRaw(requestParameters);
        return await response.value();
    }
    /**
     * Payment Request Resend Auth
     * Payment Request Resend Auth
     */
    async resendPaymentRequestAuthRaw(requestParameters) {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId', 'Required parameter requestParameters.paymentRequestId was null or undefined when calling resendPaymentRequestAuth.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }
        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/auth/resend`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentRequestFromJSON)(jsonValue));
    }
    /**
     * Payment Request Resend Auth
     * Payment Request Resend Auth
     */
    async resendPaymentRequestAuth(requestParameters) {
        const response = await this.resendPaymentRequestAuthRaw(requestParameters);
        return await response.value();
    }
    /**
     * Payment Request Simulate Payment
     * Payment Request Simulate Payment
     */
    async simulatePaymentRequestPaymentRaw(requestParameters) {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId', 'Required parameter requestParameters.paymentRequestId was null or undefined when calling simulatePaymentRequestPayment.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");
        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/payments/simulate`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaymentSimulationFromJSON)(jsonValue));
    }
    /**
     * Payment Request Simulate Payment
     * Payment Request Simulate Payment
     */
    async simulatePaymentRequestPayment(requestParameters) {
        const response = await this.simulatePaymentRequestPaymentRaw(requestParameters);
        return await response.value();
    }
}
exports.PaymentRequestApi = PaymentRequestApi;
