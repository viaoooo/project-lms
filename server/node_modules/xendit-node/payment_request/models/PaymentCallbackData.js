"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentCallbackDataToJSON = exports.PaymentCallbackDataFromJSONTyped = exports.PaymentCallbackDataFromJSON = exports.instanceOfPaymentCallbackData = void 0;
const runtime_1 = require("../../runtime");
const PaymentMethod_1 = require("./PaymentMethod");
const PaymentRequestChannelProperties_1 = require("./PaymentRequestChannelProperties");
/**
 * Check if a given object implements the PaymentCallbackData interface.
 */
function instanceOfPaymentCallbackData(value) {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "referenceId" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "paymentMethod" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    return isInstance;
}
exports.instanceOfPaymentCallbackData = instanceOfPaymentCallbackData;
function PaymentCallbackDataFromJSON(json) {
    return PaymentCallbackDataFromJSONTyped(json, false);
}
exports.PaymentCallbackDataFromJSON = PaymentCallbackDataFromJSON;
function PaymentCallbackDataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'paymentRequestId': !(0, runtime_1.exists)(json, 'payment_request_id') ? undefined : json['payment_request_id'],
        'referenceId': json['reference_id'],
        'customerId': !(0, runtime_1.exists)(json, 'customer_id') ? undefined : json['customer_id'],
        'currency': json['currency'],
        'amount': json['amount'],
        'country': json['country'],
        'status': json['status'],
        'paymentMethod': (0, PaymentMethod_1.PaymentMethodFromJSON)(json['payment_method']),
        'channelProperties': !(0, runtime_1.exists)(json, 'channel_properties') ? undefined : (0, PaymentRequestChannelProperties_1.PaymentRequestChannelPropertiesFromJSON)(json['channel_properties']),
        'paymentDetail': !(0, runtime_1.exists)(json, 'payment_detail') ? undefined : json['payment_detail'],
        'failureCode': !(0, runtime_1.exists)(json, 'failure_code') ? undefined : json['failure_code'],
        'created': json['created'],
        'updated': json['updated'],
        'metadata': !(0, runtime_1.exists)(json, 'metadata') ? undefined : json['metadata'],
    };
}
exports.PaymentCallbackDataFromJSONTyped = PaymentCallbackDataFromJSONTyped;
function PaymentCallbackDataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'payment_request_id': value.paymentRequestId,
        'reference_id': value.referenceId,
        'customer_id': value.customerId,
        'currency': value.currency,
        'amount': value.amount,
        'country': value.country,
        'status': value.status,
        'payment_method': (0, PaymentMethod_1.PaymentMethodToJSON)(value.paymentMethod),
        'channel_properties': (0, PaymentRequestChannelProperties_1.PaymentRequestChannelPropertiesToJSON)(value.channelProperties),
        'payment_detail': value.paymentDetail,
        'failure_code': value.failureCode,
        'created': value.created,
        'updated': value.updated,
        'metadata': value.metadata,
    };
}
exports.PaymentCallbackDataToJSON = PaymentCallbackDataToJSON;
