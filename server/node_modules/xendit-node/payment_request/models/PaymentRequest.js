"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentRequestToJSON = exports.PaymentRequestFromJSONTyped = exports.PaymentRequestFromJSON = exports.instanceOfPaymentRequest = void 0;
const runtime_1 = require("../../runtime");
const PaymentMethod_1 = require("./PaymentMethod");
const PaymentRequestAction_1 = require("./PaymentRequestAction");
const PaymentRequestBasketItem_1 = require("./PaymentRequestBasketItem");
const PaymentRequestCaptureMethod_1 = require("./PaymentRequestCaptureMethod");
const PaymentRequestCardVerificationResults_1 = require("./PaymentRequestCardVerificationResults");
const PaymentRequestCountry_1 = require("./PaymentRequestCountry");
const PaymentRequestCurrency_1 = require("./PaymentRequestCurrency");
const PaymentRequestInitiator_1 = require("./PaymentRequestInitiator");
const PaymentRequestShippingInformation_1 = require("./PaymentRequestShippingInformation");
const PaymentRequestStatus_1 = require("./PaymentRequestStatus");
/**
 * Check if a given object implements the PaymentRequest interface.
 */
function instanceOfPaymentRequest(value) {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "referenceId" in value;
    isInstance = isInstance && "businessId" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "paymentMethod" in value;
    isInstance = isInstance && "status" in value;
    return isInstance;
}
exports.instanceOfPaymentRequest = instanceOfPaymentRequest;
function PaymentRequestFromJSON(json) {
    return PaymentRequestFromJSONTyped(json, false);
}
exports.PaymentRequestFromJSON = PaymentRequestFromJSON;
function PaymentRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'created': json['created'],
        'updated': json['updated'],
        'referenceId': json['reference_id'],
        'businessId': json['business_id'],
        'customerId': !(0, runtime_1.exists)(json, 'customer_id') ? undefined : json['customer_id'],
        'customer': !(0, runtime_1.exists)(json, 'customer') ? undefined : json['customer'],
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : json['amount'],
        'minAmount': !(0, runtime_1.exists)(json, 'min_amount') ? undefined : json['min_amount'],
        'maxAmount': !(0, runtime_1.exists)(json, 'max_amount') ? undefined : json['max_amount'],
        'country': !(0, runtime_1.exists)(json, 'country') ? undefined : (0, PaymentRequestCountry_1.PaymentRequestCountryFromJSON)(json['country']),
        'currency': (0, PaymentRequestCurrency_1.PaymentRequestCurrencyFromJSON)(json['currency']),
        'paymentMethod': (0, PaymentMethod_1.PaymentMethodFromJSON)(json['payment_method']),
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'failureCode': !(0, runtime_1.exists)(json, 'failure_code') ? undefined : json['failure_code'],
        'captureMethod': !(0, runtime_1.exists)(json, 'capture_method') ? undefined : (0, PaymentRequestCaptureMethod_1.PaymentRequestCaptureMethodFromJSON)(json['capture_method']),
        'initiator': !(0, runtime_1.exists)(json, 'initiator') ? undefined : (0, PaymentRequestInitiator_1.PaymentRequestInitiatorFromJSON)(json['initiator']),
        'cardVerificationResults': !(0, runtime_1.exists)(json, 'card_verification_results') ? undefined : (0, PaymentRequestCardVerificationResults_1.PaymentRequestCardVerificationResultsFromJSON)(json['card_verification_results']),
        'status': (0, PaymentRequestStatus_1.PaymentRequestStatusFromJSON)(json['status']),
        'actions': !(0, runtime_1.exists)(json, 'actions') ? undefined : (json['actions'].map(PaymentRequestAction_1.PaymentRequestActionFromJSON)),
        'metadata': !(0, runtime_1.exists)(json, 'metadata') ? undefined : json['metadata'],
        'shippingInformation': !(0, runtime_1.exists)(json, 'shipping_information') ? undefined : (0, PaymentRequestShippingInformation_1.PaymentRequestShippingInformationFromJSON)(json['shipping_information']),
        'items': !(0, runtime_1.exists)(json, 'items') ? undefined : (json['items'] === null ? null : json['items'].map(PaymentRequestBasketItem_1.PaymentRequestBasketItemFromJSON)),
    };
}
exports.PaymentRequestFromJSONTyped = PaymentRequestFromJSONTyped;
function PaymentRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'created': value.created,
        'updated': value.updated,
        'reference_id': value.referenceId,
        'business_id': value.businessId,
        'customer_id': value.customerId,
        'customer': value.customer,
        'amount': value.amount,
        'min_amount': value.minAmount,
        'max_amount': value.maxAmount,
        'country': (0, PaymentRequestCountry_1.PaymentRequestCountryToJSON)(value.country),
        'currency': (0, PaymentRequestCurrency_1.PaymentRequestCurrencyToJSON)(value.currency),
        'payment_method': (0, PaymentMethod_1.PaymentMethodToJSON)(value.paymentMethod),
        'description': value.description,
        'failure_code': value.failureCode,
        'capture_method': (0, PaymentRequestCaptureMethod_1.PaymentRequestCaptureMethodToJSON)(value.captureMethod),
        'initiator': (0, PaymentRequestInitiator_1.PaymentRequestInitiatorToJSON)(value.initiator),
        'card_verification_results': (0, PaymentRequestCardVerificationResults_1.PaymentRequestCardVerificationResultsToJSON)(value.cardVerificationResults),
        'status': (0, PaymentRequestStatus_1.PaymentRequestStatusToJSON)(value.status),
        'actions': value.actions === undefined ? undefined : (value.actions.map(PaymentRequestAction_1.PaymentRequestActionToJSON)),
        'metadata': value.metadata,
        'shipping_information': (0, PaymentRequestShippingInformation_1.PaymentRequestShippingInformationToJSON)(value.shippingInformation),
        'items': value.items === undefined ? undefined : (value.items === null ? null : value.items.map(PaymentRequestBasketItem_1.PaymentRequestBasketItemToJSON)),
    };
}
exports.PaymentRequestToJSON = PaymentRequestToJSON;
