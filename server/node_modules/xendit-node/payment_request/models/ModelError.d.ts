/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    errorCode?: ModelErrorErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    message?: string | null;
}
/**
 * @export
 */
export declare const ModelErrorErrorCodeEnum: {
    readonly AccountAccessBlocked: "ACCOUNT_ACCESS_BLOCKED";
    readonly AddressValidationFailed: "ADDRESS_VALIDATION_FAILED";
    readonly AmountMismatched: "AMOUNT_MISMATCHED";
    readonly ApiValidationError: "API_VALIDATION_ERROR";
    readonly AuthenticationFailed: "AUTHENTICATION_FAILED";
    readonly AuthenticationRequired: "AUTHENTICATION_REQUIRED";
    readonly CardDeclined: "CARD_DECLINED";
    readonly ChannelCodeNotSupportedError: "CHANNEL_CODE_NOT_SUPPORTED_ERROR";
    readonly ChannelNotActivated: "CHANNEL_NOT_ACTIVATED";
    readonly ChannelUnavailable: "CHANNEL_UNAVAILABLE";
    readonly CofCombinationNotAllowedError: "COF_COMBINATION_NOT_ALLOWED_ERROR";
    readonly CurrencyMismatched: "CURRENCY_MISMATCHED";
    readonly CustomerNotFoundError: "CUSTOMER_NOT_FOUND_ERROR";
    readonly CustomerPaymentMethodMismatched: "CUSTOMER_PAYMENT_METHOD_MISMATCHED";
    readonly DataNotFound: "DATA_NOT_FOUND";
    readonly DataNotFoundError: "DATA_NOT_FOUND_ERROR";
    readonly DeclinedByIssuer: "DECLINED_BY_ISSUER";
    readonly DeclinedByProcessor: "DECLINED_BY_PROCESSOR";
    readonly DeniedPersonListMatched: "DENIED_PERSON_LIST_MATCHED";
    readonly DuplicateError: "DUPLICATE_ERROR";
    readonly DuplicateReference: "DUPLICATE_REFERENCE";
    readonly ExceedsCapturableAmount: "EXCEEDS_CAPTURABLE_AMOUNT";
    readonly ExpiredCard: "EXPIRED_CARD";
    readonly ExpiredOtpError: "EXPIRED_OTP_ERROR";
    readonly FeatureNotActivated: "FEATURE_NOT_ACTIVATED";
    readonly IdempotencyError: "IDEMPOTENCY_ERROR";
    readonly InactiveOrUnauthorizedCard: "INACTIVE_OR_UNAUTHORIZED_CARD";
    readonly InsufficientBalance: "INSUFFICIENT_BALANCE";
    readonly InvalidAccountDetails: "INVALID_ACCOUNT_DETAILS";
    readonly InvalidCvv: "INVALID_CVV";
    readonly InvalidOtpError: "INVALID_OTP_ERROR";
    readonly InvalidPaymentMethod: "INVALID_PAYMENT_METHOD";
    readonly IssuerUnavailable: "ISSUER_UNAVAILABLE";
    readonly ManualCaptureNotSupported: "MANUAL_CAPTURE_NOT_SUPPORTED";
    readonly MaxAccountLinking: "MAX_ACCOUNT_LINKING";
    readonly MaxAmountLimitError: "MAX_AMOUNT_LIMIT_ERROR";
    readonly MaxOtpAttemptsError: "MAX_OTP_ATTEMPTS_ERROR";
    readonly OperationNotAllowed: "OPERATION_NOT_ALLOWED";
    readonly OtpDeliveryError: "OTP_DELIVERY_ERROR";
    readonly PaymentMethodNotFoundError: "PAYMENT_METHOD_NOT_FOUND_ERROR";
    readonly PaymentRequestAlreadyCompleted: "PAYMENT_REQUEST_ALREADY_COMPLETED";
    readonly PaymentRequestAlreadyFailed: "PAYMENT_REQUEST_ALREADY_FAILED";
    readonly PaymentRequestAlreadyFullyCaptured: "PAYMENT_REQUEST_ALREADY_FULLY_CAPTURED";
    readonly PaymentStatusFailed: "PAYMENT_STATUS_FAILED";
    readonly ProcessorConfigurationError: "PROCESSOR_CONFIGURATION_ERROR";
    readonly ProcessorError: "PROCESSOR_ERROR";
    readonly ProcessorTemporarilyUnavailable: "PROCESSOR_TEMPORARILY_UNAVAILABLE";
    readonly ProcessorTimeout: "PROCESSOR_TIMEOUT";
    readonly RejectedByAcquirer: "REJECTED_BY_ACQUIRER";
    readonly ServerError: "SERVER_ERROR";
    readonly StolenCard: "STOLEN_CARD";
    readonly StrongCustomerAuthenticationRequired: "STRONG_CUSTOMER_AUTHENTICATION_REQUIRED";
    readonly SuspectedFraudulent: "SUSPECTED_FRAUDULENT";
    readonly Unauthorized: "UNAUTHORIZED";
    readonly DuplicatedFixedPaymentInstrument: "DUPLICATED_FIXED_PAYMENT_INSTRUMENT";
};
export type ModelErrorErrorCodeEnum = typeof ModelErrorErrorCodeEnum[keyof typeof ModelErrorErrorCodeEnum];
/**
 * Check if a given object implements the ModelError interface.
 */
export declare function instanceOfModelError(value: object): boolean;
export declare function ModelErrorFromJSON(json: any): ModelError;
export declare function ModelErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelError;
export declare function ModelErrorToJSON(value?: ModelError | null): any;
